{"remainingRequest":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/babel-loader/lib/index.js!/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue","mtime":1581566766788},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/babel-loader/lib/index.js","mtime":1574436104827},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js","mtime":1580041499935}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n * @Descripttion: 上传\n * @Author: yanxu gong\n * @Date: 2020-01-26 20:52:05\n * @LastEditors  : yanxu gong\n * @LastEditTime : 2020-02-13 12:06:06\n -->\n<template>\n  <div>\n    <div class=\"upload\">\n      <input\n        type=\"file\"\n        :disabled=\"status !== Status.wait\"\n        @change=\"handleFileChange\"\n      />\n      <el-button @click=\"handleUpload\" :disabled=\"uploadDisabled\"\n        >上传</el-button\n      >\n      <el-button @click=\"handleResume\" v-if=\"status === Status.pause\"\n        >恢复</el-button\n      >\n      <el-button\n        v-else\n        @click=\"handlePause\"\n        :disabled=\"status !== Status.uploading || !container.hash\"\n        >暂停</el-button\n      >\n    </div>\n    <div>\n      <div>计算文件 hash</div>\n      <el-progress :percentage=\"hashPercentage\"></el-progress>\n      <div>总进度</div>\n      <el-progress :percentage=\"fakeUploadPercentage\"></el-progress>\n    </div>\n    <el-table :data=\"data\">\n      <el-table-column\n        prop=\"hash\"\n        label=\"切片hash\"\n        align=\"center\"\n      ></el-table-column>\n      <el-table-column label=\"大小(KB)\" align=\"center\" width=\"120\">\n        <template v-slot=\"{ row }\">\n          {{ row.size | transformByte }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"进度\" align=\"center\">\n        <template v-slot=\"{ row }\">\n          <el-progress\n            :percentage=\"row.percentage\"\n            color=\"#909399\"\n          ></el-progress>\n        </template>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nconst SIZE = 10 * 1024 * 1024 // 切片大小\n\nconst Status = {\n  wait: 'wait',\n  pause: 'pause',\n  uploading: 'uploading'\n}\n\nexport default {\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0))\n    }\n  },\n  data: () => ({\n    Status,\n    container: {\n      file: null,\n      hash: '',\n      worker: null\n    },\n    hashPercentage: 0,\n    data: [],\n    requestList: [],\n    status: Status.wait,\n    // 当暂停时会取消 xhr 导致进度条后退\n    // 为了避免这种情况，需要定义一个假的进度条\n    fakeUploadPercentage: 0\n  }),\n  watch: {\n    uploadPercentage(newValue) {\n      if (newValue > this.fakeUploadPercentage) {\n        this.fakeUploadPercentage = newValue\n      }\n    }\n  },\n  computed: {\n    uploadDisabled() {\n      return (\n        !this.container.file ||\n        [Status.pause, Status.uploading].includes(this.status)\n      )\n    },\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0\n      const loaded = this.data\n        .map(item => item.size * item.percentage)\n        .reduce((acc, cur) => acc + cur)\n      return parseInt((loaded / this.container.file.size).toFixed(2))\n    }\n  },\n  methods: {\n    handlePause() {\n      this.status = Status.pause\n      this.resetData()\n    },\n    resetData() {\n      this.requestList.forEach(xhr => xhr?.abort())\n      this.requestList = []\n      if (this.container.worker) {\n        this.container.worker.onmessage = null\n      }\n    },\n    request({\n      url,\n      method = 'post',\n      data,\n      headers = {},\n      onProgress = e => e,\n      requestList\n    }) {\n      return new Promise(resolve => {\n        const xhr = new XMLHttpRequest()\n        xhr.upload.onprogress = onProgress\n        xhr.open(method, url)\n        Object.keys(headers).forEach(key =>\n          xhr.setRequestHeader(key, headers[key])\n        )\n        xhr.send(data)\n        xhr.onload = e => {\n          // 将请求成功的 xhr 从列表中删除\n          if (requestList) {\n            const xhrIndex = requestList.findIndex(item => item === xhr)\n            requestList.splice(xhrIndex, 1)\n          }\n          resolve({\n            data: e.target.response\n          })\n        }\n        // 暴露当前 xhr 给外部\n        requestList && requestList.push(xhr)\n      })\n    },\n    // 生成文件切片\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = []\n      let sum = 0\n      // 当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环\n      while (sum < file.size) {\n        fileChunkList.push({ file: file.slice(sum, sum + size) })\n        sum += size\n      }\n      return fileChunkList\n    },\n    // 生成文件 hash (web-worker)\n    calculateHash(fileChunkList) {\n      debugger\n      return new Promise(resolve => {\n        // 添加 worker 属性\n        this.container.worker = new Worker('/hash.js')\n        this.container.worker.postMessage({ fileChunkList })\n        this.container.worker.onmessage = e => {\n          const { percentage, hash } = e.data\n          this.hashPercentage = percentage\n          if (hash) {\n            resolve(hash)\n          }\n        }\n      })\n    },\n    handleFileChange(e) {\n      const [file] = e.target.files\n      if (!file) return\n      this.resetData()\n      // 将当前状态的data重置为初始状态\n      Object.assign(this.$data, this.$options.data())\n      this.container.file = file\n    },\n    createProgressHandler(item) {\n      return e => {\n        item.percentage = parseInt(String((e.loaded / e.total) * 100))\n      }\n    },\n    async handleResume() {\n      this.status = Status.uploading\n      const { uploadedList } = await this.verifyUpload(\n        this.container.file.name,\n        this.container.hash\n      )\n      await this.uploadChunks(uploadedList)\n    },\n    async handleUpload() {\n      debugger\n      if (!this.container.file) return\n      this.status = Status.uploading\n      const fileChunkList = this.createFileChunk(this.container.file)\n      this.container.hash = await this.calculateHash(fileChunkList)\n\n      const { shouldUpload, uploadedList } = await this.verifyUpload(\n        this.container.file.name,\n        this.container.hash\n      )\n      if (!shouldUpload) {\n        this.$message.success('秒传：上传成功')\n        this.status = Status.wait\n        return\n      }\n\n      this.data = fileChunkList.map(({ file }, index) => ({\n        fileHash: this.container.hash,\n        index,\n        hash: `${this.container.file.name}-${index}`, // 文件名 + 数组下标\n        chunk: file,\n        size: file.size,\n        percentage: uploadedList.includes(index) ? 100 : 0\n      }))\n\n      await this.uploadChunks(uploadedList)\n    },\n    // 上传切片\n    async uploadChunks(uploadedList = []) {\n      const requestList = this.data\n        .filter(({ hash }) => !uploadedList.includes(hash))\n        .map(({ chunk, hash, index }) => {\n          const formData = new FormData()\n          formData.append('chunk', chunk)\n          formData.append('hash', hash)\n          formData.append('filename', this.container.file.name)\n          formData.append('fileHash', this.container.hash)\n          return { formData, index }\n        })\n        .map(async ({ formData, index }) =>\n          this.request({\n            url: 'http://localhost:3000',\n            data: formData,\n            onProgress: this.createProgressHandler(this.data[index]),\n            requestList: this.requestList\n          })\n        )\n      await Promise.all(requestList) // 并发切片\n      // 之前上传的切片数量 + 本次上传的切片数量 = 所有切片数量时\n      // 合并切片\n      if (uploadedList.length + requestList.length === this.data.length) {\n        await this.mergeRequest()\n      }\n    },\n    async mergeRequest() {\n      // debugger\n      await this.request({\n        url: 'http://localhost:3000/merge',\n        headers: { 'content-type': 'application/json' },\n        data: JSON.stringify({\n          size: SIZE,\n          fileHash: this.container.hash,\n          filename: this.container.file.name\n        })\n      })\n      this.$message.success('上传成功')\n      this.status = Status.wait\n    },\n    async verifyUpload(filename, fileHash) {\n      const { data } = await this.request({\n        url: 'http://localhost:3000/verify',\n        headers: { 'content-type': 'application/json' },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      })\n      return JSON.parse(data)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views"}]}