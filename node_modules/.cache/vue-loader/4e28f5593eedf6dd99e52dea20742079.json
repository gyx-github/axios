{"remainingRequest":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue","mtime":1581566766788},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/babel-loader/lib/index.js","mtime":1574436104827},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js","mtime":1580041499935}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Upload.vue","sourceRoot":"src/views","sourcesContent":["<!--\n * @Descripttion: 上传\n * @Author: yanxu gong\n * @Date: 2020-01-26 20:52:05\n * @LastEditors  : yanxu gong\n * @LastEditTime : 2020-02-13 12:06:06\n -->\n<template>\n  <div>\n    <div class=\"upload\">\n      <input\n        type=\"file\"\n        :disabled=\"status !== Status.wait\"\n        @change=\"handleFileChange\"\n      />\n      <el-button @click=\"handleUpload\" :disabled=\"uploadDisabled\"\n        >上传</el-button\n      >\n      <el-button @click=\"handleResume\" v-if=\"status === Status.pause\"\n        >恢复</el-button\n      >\n      <el-button\n        v-else\n        @click=\"handlePause\"\n        :disabled=\"status !== Status.uploading || !container.hash\"\n        >暂停</el-button\n      >\n    </div>\n    <div>\n      <div>计算文件 hash</div>\n      <el-progress :percentage=\"hashPercentage\"></el-progress>\n      <div>总进度</div>\n      <el-progress :percentage=\"fakeUploadPercentage\"></el-progress>\n    </div>\n    <el-table :data=\"data\">\n      <el-table-column\n        prop=\"hash\"\n        label=\"切片hash\"\n        align=\"center\"\n      ></el-table-column>\n      <el-table-column label=\"大小(KB)\" align=\"center\" width=\"120\">\n        <template v-slot=\"{ row }\">\n          {{ row.size | transformByte }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"进度\" align=\"center\">\n        <template v-slot=\"{ row }\">\n          <el-progress\n            :percentage=\"row.percentage\"\n            color=\"#909399\"\n          ></el-progress>\n        </template>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nconst SIZE = 10 * 1024 * 1024 // 切片大小\n\nconst Status = {\n  wait: 'wait',\n  pause: 'pause',\n  uploading: 'uploading'\n}\n\nexport default {\n  filters: {\n    transformByte(val) {\n      return Number((val / 1024).toFixed(0))\n    }\n  },\n  data: () => ({\n    Status,\n    container: {\n      file: null,\n      hash: '',\n      worker: null\n    },\n    hashPercentage: 0,\n    data: [],\n    requestList: [],\n    status: Status.wait,\n    // 当暂停时会取消 xhr 导致进度条后退\n    // 为了避免这种情况，需要定义一个假的进度条\n    fakeUploadPercentage: 0\n  }),\n  watch: {\n    uploadPercentage(newValue) {\n      if (newValue > this.fakeUploadPercentage) {\n        this.fakeUploadPercentage = newValue\n      }\n    }\n  },\n  computed: {\n    uploadDisabled() {\n      return (\n        !this.container.file ||\n        [Status.pause, Status.uploading].includes(this.status)\n      )\n    },\n    uploadPercentage() {\n      if (!this.container.file || !this.data.length) return 0\n      const loaded = this.data\n        .map(item => item.size * item.percentage)\n        .reduce((acc, cur) => acc + cur)\n      return parseInt((loaded / this.container.file.size).toFixed(2))\n    }\n  },\n  methods: {\n    handlePause() {\n      this.status = Status.pause\n      this.resetData()\n    },\n    resetData() {\n      this.requestList.forEach(xhr => xhr?.abort())\n      this.requestList = []\n      if (this.container.worker) {\n        this.container.worker.onmessage = null\n      }\n    },\n    request({\n      url,\n      method = 'post',\n      data,\n      headers = {},\n      onProgress = e => e,\n      requestList\n    }) {\n      return new Promise(resolve => {\n        const xhr = new XMLHttpRequest()\n        xhr.upload.onprogress = onProgress\n        xhr.open(method, url)\n        Object.keys(headers).forEach(key =>\n          xhr.setRequestHeader(key, headers[key])\n        )\n        xhr.send(data)\n        xhr.onload = e => {\n          // 将请求成功的 xhr 从列表中删除\n          if (requestList) {\n            const xhrIndex = requestList.findIndex(item => item === xhr)\n            requestList.splice(xhrIndex, 1)\n          }\n          resolve({\n            data: e.target.response\n          })\n        }\n        // 暴露当前 xhr 给外部\n        requestList && requestList.push(xhr)\n      })\n    },\n    // 生成文件切片\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = []\n      let sum = 0\n      // 当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环\n      while (sum < file.size) {\n        fileChunkList.push({ file: file.slice(sum, sum + size) })\n        sum += size\n      }\n      return fileChunkList\n    },\n    // 生成文件 hash (web-worker)\n    calculateHash(fileChunkList) {\n      debugger\n      return new Promise(resolve => {\n        // 添加 worker 属性\n        this.container.worker = new Worker('/hash.js')\n        this.container.worker.postMessage({ fileChunkList })\n        this.container.worker.onmessage = e => {\n          const { percentage, hash } = e.data\n          this.hashPercentage = percentage\n          if (hash) {\n            resolve(hash)\n          }\n        }\n      })\n    },\n    handleFileChange(e) {\n      const [file] = e.target.files\n      if (!file) return\n      this.resetData()\n      // 将当前状态的data重置为初始状态\n      Object.assign(this.$data, this.$options.data())\n      this.container.file = file\n    },\n    createProgressHandler(item) {\n      return e => {\n        item.percentage = parseInt(String((e.loaded / e.total) * 100))\n      }\n    },\n    async handleResume() {\n      this.status = Status.uploading\n      const { uploadedList } = await this.verifyUpload(\n        this.container.file.name,\n        this.container.hash\n      )\n      await this.uploadChunks(uploadedList)\n    },\n    async handleUpload() {\n      debugger\n      if (!this.container.file) return\n      this.status = Status.uploading\n      const fileChunkList = this.createFileChunk(this.container.file)\n      this.container.hash = await this.calculateHash(fileChunkList)\n\n      const { shouldUpload, uploadedList } = await this.verifyUpload(\n        this.container.file.name,\n        this.container.hash\n      )\n      if (!shouldUpload) {\n        this.$message.success('秒传：上传成功')\n        this.status = Status.wait\n        return\n      }\n\n      this.data = fileChunkList.map(({ file }, index) => ({\n        fileHash: this.container.hash,\n        index,\n        hash: `${this.container.file.name}-${index}`, // 文件名 + 数组下标\n        chunk: file,\n        size: file.size,\n        percentage: uploadedList.includes(index) ? 100 : 0\n      }))\n\n      await this.uploadChunks(uploadedList)\n    },\n    // 上传切片\n    async uploadChunks(uploadedList = []) {\n      const requestList = this.data\n        .filter(({ hash }) => !uploadedList.includes(hash))\n        .map(({ chunk, hash, index }) => {\n          const formData = new FormData()\n          formData.append('chunk', chunk)\n          formData.append('hash', hash)\n          formData.append('filename', this.container.file.name)\n          formData.append('fileHash', this.container.hash)\n          return { formData, index }\n        })\n        .map(async ({ formData, index }) =>\n          this.request({\n            url: 'http://localhost:3000',\n            data: formData,\n            onProgress: this.createProgressHandler(this.data[index]),\n            requestList: this.requestList\n          })\n        )\n      await Promise.all(requestList) // 并发切片\n      // 之前上传的切片数量 + 本次上传的切片数量 = 所有切片数量时\n      // 合并切片\n      if (uploadedList.length + requestList.length === this.data.length) {\n        await this.mergeRequest()\n      }\n    },\n    async mergeRequest() {\n      // debugger\n      await this.request({\n        url: 'http://localhost:3000/merge',\n        headers: { 'content-type': 'application/json' },\n        data: JSON.stringify({\n          size: SIZE,\n          fileHash: this.container.hash,\n          filename: this.container.file.name\n        })\n      })\n      this.$message.success('上传成功')\n      this.status = Status.wait\n    },\n    async verifyUpload(filename, fileHash) {\n      const { data } = await this.request({\n        url: 'http://localhost:3000/verify',\n        headers: { 'content-type': 'application/json' },\n        data: JSON.stringify({\n          filename,\n          fileHash\n        })\n      })\n      return JSON.parse(data)\n    }\n  }\n}\n</script>\n"]}]}