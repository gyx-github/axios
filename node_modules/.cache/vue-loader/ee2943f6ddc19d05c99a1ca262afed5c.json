{"remainingRequest":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/src/views/Upload.vue","mtime":1580357580337},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/babel-loader/lib/index.js","mtime":1574436104827},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/cache-loader/dist/cjs.js","mtime":1580041481289},{"path":"/Users/yanxugong/Workspace/01 Code/file-upload/node_modules/vue-loader/lib/index.js","mtime":1580041499935}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IFNJWkUgPSAxMCAqIDEwMjQgKiAxMDI0IC8vIOWIh+eJh+Wkp+WwjwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6ICgpID0+ICh7CiAgICBjb250YWluZXI6IHsKICAgICAgZmlsZTogbnVsbCwKICAgICAgZGF0YTogW10KICAgIH0KICB9KSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVGaWxlQ2hhbmdlKGUpIHsKICAgICAgY29uc3QgW2ZpbGVdID0gZS50YXJnZXQuZmlsZXMKICAgICAgaWYgKCFmaWxlKSByZXR1cm4KICAgICAgLy8g5bCG5b2T5YmN54q25oCB55qEZGF0YemHjee9ruS4uuWIneWni+eKtuaAgQogICAgICBPYmplY3QuYXNzaWduKHRoaXMuJGRhdGEsIHRoaXMuJG9wdGlvbnMuZGF0YSgpKQogICAgICB0aGlzLmNvbnRhaW5lci5maWxlID0gZmlsZQogICAgfSwKICAgIC8vIOeUn+aIkOaWh+S7tuWIh+eJhwogICAgY3JlYXRlRmlsZUNodW5rKGZpbGUsIHNpemUgPSBTSVpFKSB7CiAgICAgIGNvbnN0IGZpbGVDaHVua0xpc3QgPSBbXQogICAgICBsZXQgc3VtID0gMAogICAgICAvLyDlvZPmu6HotrPmnaHku7bml7bov5vlhaXlvqrnjq/vvIzov5vlhaXlvqrnjq/lkI7vvIzlvZPmnaHku7bkuI3mu6HotrPml7bvvIzot7Plh7rlvqrnjq8KICAgICAgd2hpbGUgKHN1bSA8IGZpbGUuc2l6ZSkgewogICAgICAgIGZpbGVDaHVua0xpc3QucHVzaCh7IGZpbGU6IGZpbGUuc2xpY2Uoc3VtLCBzdW0gKyBzaXplKSB9KQogICAgICAgIHN1bSArPSBzaXplCiAgICAgIH0KICAgICAgcmV0dXJuIGZpbGVDaHVua0xpc3QKICAgIH0sCiAgICByZXF1ZXN0KHsgdXJsLCBtZXRob2QgPSAncG9zdCcsIGRhdGEsIGhlYWRlcnMgPSB7fSwgcmVxdWVzdExpc3QgfSkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCkKICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCkKICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGtleSA9PgogICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pCiAgICAgICAgKQogICAgICAgIHhoci5zZW5kKGRhdGEpCiAgICAgICAgeGhyLm9ubG9hZCA9IGUgPT4gewogICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgIGRhdGE6IGUudGFyZ2V0LnJlc3BvbnNlCiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSkKICAgIH0sCiAgICAvLyDkuIrkvKDliIfniYcKICAgIGFzeW5jIHVwbG9hZENodW5rcygpIHsKICAgICAgY29uc3QgcmVxdWVzdExpc3QgPSB0aGlzLmRhdGEKICAgICAgICAubWFwKCh7IGNodW5rLCBoYXNoIH0pID0+IHsKICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCkKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnY2h1bmsnLCBjaHVuaykKICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaGFzaCcsIGhhc2gpCiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGVuYW1lJywgdGhpcy5jb250YWluZXIuZmlsZS5uYW1lKQogICAgICAgICAgcmV0dXJuIHsgZm9ybURhdGEgfQogICAgICAgIH0pCiAgICAgICAgLm1hcChhc3luYyAoeyBmb3JtRGF0YSB9KSA9PgogICAgICAgICAgdGhpcy5yZXF1ZXN0KHsgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwJywgZGF0YTogZm9ybURhdGEgfSkKICAgICAgICApCiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHJlcXVlc3RMaXN0KSAvLyDlubblj5HliIfniYcKICAgICAgYXdhaXQgdGhpcy5tZXJnZVJlcXVlc3QoKQogICAgfSwKICAgIGFzeW5jIG1lcmdlUmVxdWVzdCgpIHsKICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0KHsKICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvbWVyZ2UnLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICB9LAogICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmNvbnRhaW5lci5maWxlLm5hbWUKICAgICAgICB9KQogICAgICB9KQogICAgfSwKICAgIGFzeW5jIGhhbmRsZVVwbG9hZCgpIHsKICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lci5maWxlKSByZXR1cm4KICAgICAgY29uc3QgZmlsZUNodW5rTGlzdCA9IHRoaXMuY3JlYXRlRmlsZUNodW5rKHRoaXMuY29udGFuaWVyLmZpbGUpCiAgICAgIHRoaXMuZGF0YSA9IGZpbGVDaHVua0xpc3QubWFwKCh7IGZpbGUgfSwgaW5kZXgpID0+ICh7CiAgICAgICAgY2h1bms6IGZpbGUsCiAgICAgICAgaGFzaDogYCR7dGhpcy5jb250YWluZXIuZmlsZS5uYW1lfS0ke2luZGV4fWAgLy8g5paH5Lu25ZCNICsg5pWw57uE5LiL5qCHCiAgICAgIH0pKQogICAgICBhd2FpdCB0aGlzLnVwbG9hZENodW5rcygpCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Upload.vue","sourceRoot":"src/views","sourcesContent":["<!--\n * @Descripttion: 上传\n * @Author: voanit\n * @Date: 2020-01-26 20:52:05\n * @LastEditors  : yanxu gong\n * @LastEditTime : 2020-01-30 12:13:00\n -->\n<template>\n  <div class=\"upload\">\n    <input type=\"file\" @change=\"handleFileChange\" />\n    <el-button @click=\"handleUpload\">上传</el-button>\n  </div>\n</template>\n\n<script>\nconst SIZE = 10 * 1024 * 1024 // 切片大小\n\nexport default {\n  data: () => ({\n    container: {\n      file: null,\n      data: []\n    }\n  }),\n  methods: {\n    handleFileChange(e) {\n      const [file] = e.target.files\n      if (!file) return\n      // 将当前状态的data重置为初始状态\n      Object.assign(this.$data, this.$options.data())\n      this.container.file = file\n    },\n    // 生成文件切片\n    createFileChunk(file, size = SIZE) {\n      const fileChunkList = []\n      let sum = 0\n      // 当满足条件时进入循环，进入循环后，当条件不满足时，跳出循环\n      while (sum < file.size) {\n        fileChunkList.push({ file: file.slice(sum, sum + size) })\n        sum += size\n      }\n      return fileChunkList\n    },\n    request({ url, method = 'post', data, headers = {}, requestList }) {\n      return new Promise(resolve => {\n        const xhr = new XMLHttpRequest()\n        xhr.open(method, url)\n        Object.keys(headers).forEach(key =>\n          xhr.setRequestHeader(key, headers[key])\n        )\n        xhr.send(data)\n        xhr.onload = e => {\n          resolve({\n            data: e.target.response\n          })\n        }\n      })\n    },\n    // 上传切片\n    async uploadChunks() {\n      const requestList = this.data\n        .map(({ chunk, hash }) => {\n          const formData = new FormData()\n          formData.append('chunk', chunk)\n          formData.append('hash', hash)\n          formData.append('filename', this.container.file.name)\n          return { formData }\n        })\n        .map(async ({ formData }) =>\n          this.request({ url: 'http://localhost:3000', data: formData })\n        )\n      await Promise.all(requestList) // 并发切片\n      await this.mergeRequest()\n    },\n    async mergeRequest() {\n      await this.request({\n        url: 'http://localhost:3000/merge',\n        headers: {\n          'content-type': 'application/json'\n        },\n        data: JSON.stringify({\n          filename: this.container.file.name\n        })\n      })\n    },\n    async handleUpload() {\n      if (!this.container.file) return\n      const fileChunkList = this.createFileChunk(this.contanier.file)\n      this.data = fileChunkList.map(({ file }, index) => ({\n        chunk: file,\n        hash: `${this.container.file.name}-${index}` // 文件名 + 数组下标\n      }))\n      await this.uploadChunks()\n    }\n  }\n}\n</script>\n"]}]}